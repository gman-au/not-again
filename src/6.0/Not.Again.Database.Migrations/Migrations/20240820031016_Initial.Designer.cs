// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Not.Again.Database.Migrations;

#nullable disable

namespace Not.Again.Database.Migrations.Migrations
{
    [DbContext(typeof(MigrationContext))]
    [Migration("20240820031016_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Not.Again.Domain.TestAssembly", b =>
                {
                    b.Property<Guid>("TestAssemblyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TestAssemblyName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("TestAssemblyId");

                    b.ToTable("TestAssembly");
                });

            modelBuilder.Entity("Not.Again.Domain.TestRecord", b =>
                {
                    b.Property<Guid>("TestRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DelimitedTestArguments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("LastHash")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("TestAssemblyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TestName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("TestRecordId");

                    b.HasIndex("TestAssemblyId");

                    b.ToTable("TestRecord");
                });

            modelBuilder.Entity("Not.Again.Domain.TestRun", b =>
                {
                    b.Property<Guid>("TestRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<DateTime>("RunDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TestRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TotalDuration")
                        .HasColumnType("bigint");

                    b.HasKey("TestRunId");

                    b.HasIndex("TestRecordId");

                    b.ToTable("TestRun");
                });

            modelBuilder.Entity("Not.Again.Domain.TestRecord", b =>
                {
                    b.HasOne("Not.Again.Domain.TestAssembly", "TestAssembly")
                        .WithMany()
                        .HasForeignKey("TestAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestAssembly");
                });

            modelBuilder.Entity("Not.Again.Domain.TestRun", b =>
                {
                    b.HasOne("Not.Again.Domain.TestRecord", "TestRecord")
                        .WithMany()
                        .HasForeignKey("TestRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
